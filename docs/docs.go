// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/queues/{id}/join": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Добавляет пользователя в очередь и уведомляет других участников",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Вступление в очередь",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID очереди",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное вступление в очередь с указанием позиции",
                        "schema": {
                            "$ref": "#/definitions/response.MessageResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (INVALID_QUEUE_ID, ALREADY_IN_QUEUE, QUEUE_INACTIVE)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Очередь не найдена (QUEUE_NOT_FOUND)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/queues/{id}/leave": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Удаляет пользователя из очереди и уведомляет других участников",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Выход из очереди",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID очереди",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный выход из очереди",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (INVALID_QUEUE_ID, NOT_IN_QUEUE)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/queues/{id}/status": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Возвращает информацию о состоянии очереди и списке участников",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "queue"
                ],
                "summary": "Получение статуса очереди",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID очереди",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное получение статуса очереди",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerQueueStatusResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (INVALID_QUEUE_ID)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Очередь не найдена (QUEUE_NOT_FOUND)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/queues/{id}/ws": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Устанавливает WebSocket соединение для получения обновлений очереди в реальном времени",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "websocket"
                ],
                "summary": "Подключение к WebSocket очереди",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID очереди",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "101": {
                        "description": "Переключение протокола на WebSocket",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (INVALID_QUEUE_ID)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (WEBSOCKET_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Авторизация пользователя и получение токенов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация пользователя",
                "parameters": [
                    {
                        "description": "Данные для авторизации",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная авторизация",
                        "schema": {
                            "$ref": "#/definitions/response.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных (VALIDATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверные учетные данные (INVALID_CREDENTIALS)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (TOKEN_GENERATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "description": "Обновление access токена с помощью refresh токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Обновление access токена",
                "parameters": [
                    {
                        "description": "Refresh токен",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshTokenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление access токена",
                        "schema": {
                            "$ref": "#/definitions/response.TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных (VALIDATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Неверный или просроченный refresh токен (INVALID_REFRESH_TOKEN) или пользователь не найден (USER_NOT_FOUND)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (TOKEN_GENERATION_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Регистрация нового пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешная регистрация",
                        "schema": {
                            "$ref": "#/definitions/response.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации (VALIDATION_ERROR) или пользователь уже существует (EMAIL_EXISTS)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (PASSWORD_HASH_ERROR, DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "description": "Получает список всех групп, кэширует результат в Redis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "groups"
                ],
                "summary": "Получение списка групп",
                "responses": {
                    "200": {
                        "description": "Успешный ответ с данными групп",
                        "schema": {
                            "$ref": "#/definitions/handlers.GroupResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (API_ERROR, CACHE_ERROR, DECODE_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получение данных пользователя по токену",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Получение данных пользователя",
                "responses": {
                    "200": {
                        "description": "Успешное получение данных пользователя",
                        "schema": {
                            "$ref": "#/definitions/response.ProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Ошибка авторизации (UNAUTHORIZED)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/profile/queues": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Получение списка очередей, в которых пользователь участвует",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "profile"
                ],
                "summary": "Получение списка своих очередей",
                "responses": {
                    "200": {
                        "description": "List of queues the user is part of",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.UserQueueItem"
                            }
                        }
                    },
                    "500": {
                        "description": "Server error (DB_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/schedule": {
            "get": {
                "description": "Получает расписание по заданным параметрам (group_id), кэширует результат в Redis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "schedule"
                ],
                "summary": "Получение расписания",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID группы",
                        "name": "group_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с данными расписания и связанными очередями",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.SwaggerScheduleWithQueue"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка валидации данных (MISSING_GROUP_ID)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера (DB_ERROR, API_ERROR, DECODE_ERROR)",
                        "schema": {
                            "$ref": "#/definitions/response.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.Group": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                }
            }
        },
        "handlers.GroupResponse": {
            "type": "object",
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/handlers.Group"
                    }
                },
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshTokenRequest": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "handlers.RegisterRequest": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "surname"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "handlers.UserQueueItem": {
            "type": "object",
            "properties": {
                "closes_at": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "group_numbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "is_active": {
                    "type": "boolean"
                },
                "opens_at": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "queue_id": {
                    "type": "integer"
                },
                "schedule_id": {
                    "type": "integer"
                },
                "schedule_name": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "response.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Код ошибки для программной обработки\nexample: VALIDATION_ERROR",
                    "type": "string"
                },
                "details": {
                    "description": "Дополнительные детали об ошибке (опционально)\nexample: поле email должно быть валидным email адресом",
                    "type": "string"
                },
                "message": {
                    "description": "Человекочитаемое сообщение об ошибке\nexample: Ошибка валидации данных",
                    "type": "string"
                }
            }
        },
        "response.MessageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Операция успешно выполнена"
                }
            }
        },
        "response.ProfileResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "response.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Операция успешно выполнена"
                }
            }
        },
        "response.SwaggerParticipant": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Иван"
                },
                "position": {
                    "type": "integer",
                    "example": 1
                },
                "surname": {
                    "type": "string",
                    "example": "Иванов"
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "response.SwaggerQueue": {
            "type": "object",
            "properties": {
                "closes_at": {
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T08:00:00Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "max_participants": {
                    "type": "integer",
                    "example": 30
                },
                "opens_at": {
                    "type": "string",
                    "example": "2023-01-01T09:00:00Z"
                },
                "schedule_id": {
                    "type": "integer",
                    "example": 1
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T08:00:00Z"
                }
            }
        },
        "response.SwaggerQueueStatusResponse": {
            "type": "object",
            "properties": {
                "closes_at": {
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "is_active": {
                    "type": "boolean",
                    "example": true
                },
                "opens_at": {
                    "type": "string",
                    "example": "2023-01-01T09:00:00Z"
                },
                "participants": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.SwaggerParticipant"
                    }
                },
                "queue_id": {
                    "type": "integer",
                    "example": 1
                },
                "schedule_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "response.SwaggerSchedule": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2023-01-01T09:00:00Z"
                },
                "end_time": {
                    "type": "string",
                    "example": "2023-01-01T12:00:00Z"
                },
                "external_id": {
                    "type": "string",
                    "example": "123456"
                },
                "group_ids": {
                    "type": "string",
                    "example": "67,203,111"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Практика по программированию"
                },
                "start_time": {
                    "type": "string",
                    "example": "2023-01-01T10:00:00Z"
                },
                "updated_at": {
                    "type": "string",
                    "example": "2023-01-01T09:00:00Z"
                }
            }
        },
        "response.SwaggerScheduleWithQueue": {
            "type": "object",
            "properties": {
                "queue": {
                    "$ref": "#/definitions/response.SwaggerQueue"
                },
                "schedule": {
                    "$ref": "#/definitions/response.SwaggerSchedule"
                }
            }
        },
        "response.TokenResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "description": "JWT токен для доступа к защищенным эндпоинтам\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                },
                "refresh_token": {
                    "description": "JWT токен для обновления access токена\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Онлайн очередь для сдачи практики",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,

}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
